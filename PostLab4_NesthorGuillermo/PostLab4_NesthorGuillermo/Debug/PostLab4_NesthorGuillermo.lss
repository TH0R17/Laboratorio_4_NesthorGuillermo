
PostLab4_NesthorGuillermo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000028a  0000031e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  0000032e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000815  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ad  00000000  00000000  00000c15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ec  00000000  00000000  000012c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  000016b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000414  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000013f  00000000  00000000  00001bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001d0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3c 01 	call	0x278	; 0x278 <main>
  9e:	0c 94 43 01 	jmp	0x286	; 0x286 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:
		update_displays();
	}
}

ISR(ADC_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	ef 93       	push	r30
  b4:	ff 93       	push	r31
	adc_value = ADCH;  // Leer solo los 8 bits más significativos (por ADLAR)
  b6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  ba:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <adc_value>
	ADCSRA |= (1 << ADSC);  // Iniciar nueva conversión
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
}
  c8:	ff 91       	pop	r31
  ca:	ef 91       	pop	r30
  cc:	8f 91       	pop	r24
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <initADC>:

/****************************************/

void initADC()
{
	ADMUX = 0;
  d8:	ec e7       	ldi	r30, 0x7C	; 124
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	10 82       	st	Z, r1
	// Referencia AVcc, ajuste a izquierda (ADLAR), canal ADC6 (MUX2:1 = 01, MUX0 = 0)
	ADMUX |= (1 << REFS0) | (1 << ADLAR) | (1 << MUX2) | (1 << MUX1);
  de:	80 81       	ld	r24, Z
  e0:	86 66       	ori	r24, 0x66	; 102
  e2:	80 83       	st	Z, r24
	ADCSRA = 0;
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	10 82       	st	Z, r1
	// Habilitar ADC, interrupción, prescaler 8 (125kHz @ 1MHz)
	ADCSRA |= (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN) | (1 << ADIE);
  ea:	80 81       	ld	r24, Z
  ec:	8b 68       	ori	r24, 0x8B	; 139
  ee:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  // Iniciar primera conversión
  f0:	80 81       	ld	r24, Z
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <setup>:

/****************************************/
// NON-Interrupt subroutines
void setup()
{
	cli();
  f8:	f8 94       	cli
		// Configuración de puertos
		DDRB = 0xFF;
  fa:	9f ef       	ldi	r25, 0xFF	; 255
  fc:	94 b9       	out	0x04, r25	; 4
		DDRC |= (1 << PC2) | (1 << PC3); //salidas
  fe:	87 b1       	in	r24, 0x07	; 7
 100:	8c 60       	ori	r24, 0x0C	; 12
 102:	87 b9       	out	0x07, r24	; 7
		
		UCSR0B = 0;
 104:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
		
		PORTB = 0x00;
 108:	15 b8       	out	0x05, r1	; 5
		PORTC &= ~((1 << PC2) | (1 << PC3));
 10a:	88 b1       	in	r24, 0x08	; 8
 10c:	83 7f       	andi	r24, 0xF3	; 243
 10e:	88 b9       	out	0x08, r24	; 8
		
		// Configuración de botones
		DDRC &= ~((1 << PC4) | (1 << PC5));
 110:	87 b1       	in	r24, 0x07	; 7
 112:	8f 7c       	andi	r24, 0xCF	; 207
 114:	87 b9       	out	0x07, r24	; 7
		PORTC |= (1 << PC4) | (1 << PC5);
 116:	88 b1       	in	r24, 0x08	; 8
 118:	80 63       	ori	r24, 0x30	; 48
 11a:	88 b9       	out	0x08, r24	; 8
		
	// Configuración de puertos
	DDRD = 0xFF;    // PORTD para segmentos de 7 segmentos
 11c:	9a b9       	out	0x0a, r25	; 10
	DDRC |= (1 << PC0) | (1 << PC1);  // PC0 y PC1 como salidas para control de displays
 11e:	87 b1       	in	r24, 0x07	; 7
 120:	83 60       	ori	r24, 0x03	; 3
 122:	87 b9       	out	0x07, r24	; 7
	
	// PC6 como entrada para el potenciómetro (ADC6)
	DDRC &= ~(1 << PC6);
 124:	87 b1       	in	r24, 0x07	; 7
 126:	8f 7b       	andi	r24, 0xBF	; 191
 128:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << PC6);  // Sin pull-up
 12a:	88 b1       	in	r24, 0x08	; 8
 12c:	8f 7b       	andi	r24, 0xBF	; 191
 12e:	88 b9       	out	0x08, r24	; 8
	
	// Configuración del timer para multiplexación de displays
	TCCR0A = 0x00;
 130:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS02) | (1 << CS00);  // Prescaler de 1024
 132:	85 e0       	ldi	r24, 0x05	; 5
 134:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 100;  // Cargar contador
 136:	84 e6       	ldi	r24, 0x64	; 100
 138:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1 << TOIE0);  // Habilitar interrupción de desbordamiento
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	counter_10ms = 0;
 140:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <counter_10ms>
	
	contador = 0;
 144:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
	initADC();
 148:	0e 94 6c 00 	call	0xd8	; 0xd8 <initADC>
	
	sei();
 14c:	78 94       	sei
 14e:	08 95       	ret

00000150 <update_displays>:
}

void update_displays()
{
	// Obtener mitad del valor ADC
	uint8_t high_nibble = (adc_value >> 4) & 0x0F;
 150:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <adc_value>
 154:	9e 2f       	mov	r25, r30
 156:	92 95       	swap	r25
 158:	9f 70       	andi	r25, 0x0F	; 15
	uint8_t low_nibble = adc_value & 0x0F;
 15a:	ef 70       	andi	r30, 0x0F	; 15
	
	// Apagar ambos displays primero
	PORTC &= ~((1 << PC0) | (1 << PC1));
 15c:	88 b1       	in	r24, 0x08	; 8
 15e:	8c 7f       	andi	r24, 0xFC	; 252
 160:	88 b9       	out	0x08, r24	; 8
	
	if(display_digit == 0) {
 162:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <display_digit>
 166:	81 11       	cpse	r24, r1
 168:	0d c0       	rjmp	.+26     	; 0x184 <update_displays+0x34>
		// Mostrar dígito más significativo (nibble alto)
		//ver si pd1 esta encendido (y no apagarlo por accidente)
		PORTD = segment_map[high_nibble];
 16a:	e9 2f       	mov	r30, r25
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	e0 50       	subi	r30, 0x00	; 0
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	80 81       	ld	r24, Z
 174:	8b b9       	out	0x0b, r24	; 11
		PORTC |= (1 << PC1);  // Habilitar display 1 (PC0)
 176:	88 b1       	in	r24, 0x08	; 8
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	88 b9       	out	0x08, r24	; 8
		display_digit = 1;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <display_digit>
 182:	08 95       	ret
		} else {
		// Mostrar dígito menos significativo (nibble bajo)
		PORTD = segment_map[low_nibble];
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	e0 50       	subi	r30, 0x00	; 0
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	80 81       	ld	r24, Z
 18c:	8b b9       	out	0x0b, r24	; 11
		PORTC |= (1 << PC0);  // Habilitar display 2 (PC1)
 18e:	88 b1       	in	r24, 0x08	; 8
 190:	81 60       	ori	r24, 0x01	; 1
 192:	88 b9       	out	0x08, r24	; 8
		display_digit = 0;
 194:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <display_digit>
 198:	08 95       	ret

0000019a <__vector_16>:
}

/****************************************/
// Interrupt routines
ISR(TIMER0_OVF_vect)
{
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	2f 93       	push	r18
 1a6:	3f 93       	push	r19
 1a8:	4f 93       	push	r20
 1aa:	5f 93       	push	r21
 1ac:	6f 93       	push	r22
 1ae:	7f 93       	push	r23
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
 1b4:	af 93       	push	r26
 1b6:	bf 93       	push	r27
 1b8:	ef 93       	push	r30
 1ba:	ff 93       	push	r31
	TCNT0 = 100;  // Reiniciar contador
 1bc:	84 e6       	ldi	r24, 0x64	; 100
 1be:	86 bd       	out	0x26, r24	; 38
	counter_10ms++;
 1c0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <counter_10ms>
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
 1c6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <counter_10ms>
	
	if (counter_10ms >= 1)  // Multiplexar displays cada ~1ms
 1ca:	88 23       	and	r24, r24
 1cc:	21 f0       	breq	.+8      	; 0x1d6 <__vector_16+0x3c>
	{
		counter_10ms = 0;
 1ce:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <counter_10ms>
		update_displays();
 1d2:	0e 94 a8 00 	call	0x150	; 0x150 <update_displays>
	}
}
 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	bf 91       	pop	r27
 1dc:	af 91       	pop	r26
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	7f 91       	pop	r23
 1e4:	6f 91       	pop	r22
 1e6:	5f 91       	pop	r21
 1e8:	4f 91       	pop	r20
 1ea:	3f 91       	pop	r19
 1ec:	2f 91       	pop	r18
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <actualizar_leds>:

// Function to update all LEDs based on contador
void actualizar_leds()
{
	
	PORTB = contador & 0x3F;
 1f8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1fc:	8f 73       	andi	r24, 0x3F	; 63
 1fe:	85 b9       	out	0x05, r24	; 5
	
	// Actualizar PC2 y PC3 con los bits 6 y 7
	if (contador & (1 << 6))
 200:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 204:	86 ff       	sbrs	r24, 6
 206:	04 c0       	rjmp	.+8      	; 0x210 <actualizar_leds+0x18>
	PORTC |= (1 << PC2);
 208:	88 b1       	in	r24, 0x08	; 8
 20a:	84 60       	ori	r24, 0x04	; 4
 20c:	88 b9       	out	0x08, r24	; 8
 20e:	03 c0       	rjmp	.+6      	; 0x216 <actualizar_leds+0x1e>
	else
	PORTC &= ~(1 << PC2);
 210:	88 b1       	in	r24, 0x08	; 8
 212:	8b 7f       	andi	r24, 0xFB	; 251
 214:	88 b9       	out	0x08, r24	; 8
	
	if (contador & (1 << 7))
 216:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 21a:	88 23       	and	r24, r24
 21c:	24 f4       	brge	.+8      	; 0x226 <actualizar_leds+0x2e>
	PORTC |= (1 << PC3);
 21e:	88 b1       	in	r24, 0x08	; 8
 220:	88 60       	ori	r24, 0x08	; 8
 222:	88 b9       	out	0x08, r24	; 8
 224:	08 95       	ret
	else
	PORTC &= ~(1 << PC3);
 226:	88 b1       	in	r24, 0x08	; 8
 228:	87 7f       	andi	r24, 0xF7	; 247
 22a:	88 b9       	out	0x08, r24	; 8
 22c:	08 95       	ret

0000022e <funcion>:
/****************************************/

void funcion()
{
	// Botón PC4 presionado
	if (!(PINC & (1 << PC4)))
 22e:	34 99       	sbic	0x06, 4	; 6
 230:	09 c0       	rjmp	.+18     	; 0x244 <funcion+0x16>
	{
		contador++;  // Incrementar contador de 8 bits
 232:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 236:	8f 5f       	subi	r24, 0xFF	; 255
 238:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		actualizar_leds();
 23c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <actualizar_leds>
		while (!(PINC & (1 << PC4)));
 240:	34 9b       	sbis	0x06, 4	; 6
 242:	fe cf       	rjmp	.-4      	; 0x240 <funcion+0x12>
	}

	// Botón PC5 presionado
	if (!(PINC & (1 << PC5)))
 244:	35 99       	sbic	0x06, 5	; 6
 246:	09 c0       	rjmp	.+18     	; 0x25a <funcion+0x2c>
	{
		contador--;  // Decrementar contador de 8 bits
 248:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 24c:	81 50       	subi	r24, 0x01	; 1
 24e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		actualizar_leds();
 252:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <actualizar_leds>
		while (!(PINC & (1 << PC5)));
 256:	35 9b       	sbis	0x06, 5	; 6
 258:	fe cf       	rjmp	.-4      	; 0x256 <funcion+0x28>
 25a:	08 95       	ret

0000025c <alarma>:
	}
}

void alarma()
{
	if (adc_value >= contador)
 25c:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <adc_value>
 260:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 264:	98 17       	cp	r25, r24
 266:	20 f0       	brcs	.+8      	; 0x270 <alarma+0x14>
	{
		PORTD |= (1 << PD1);
 268:	8b b1       	in	r24, 0x0b	; 11
 26a:	82 60       	ori	r24, 0x02	; 2
 26c:	8b b9       	out	0x0b, r24	; 11
 26e:	08 95       	ret
	}
	else
	{
		PORTD &= ~(1 << PD1);
 270:	8b b1       	in	r24, 0x0b	; 11
 272:	8d 7f       	andi	r24, 0xFD	; 253
 274:	8b b9       	out	0x0b, r24	; 11
 276:	08 95       	ret

00000278 <main>:
/****************************************/

// Main Function
int main(void)
{
	setup();
 278:	0e 94 7c 00 	call	0xf8	; 0xf8 <setup>
	while (1)
	{
		funcion();
 27c:	0e 94 17 01 	call	0x22e	; 0x22e <funcion>
		alarma();
 280:	0e 94 2e 01 	call	0x25c	; 0x25c <alarma>
 284:	fb cf       	rjmp	.-10     	; 0x27c <main+0x4>

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>
